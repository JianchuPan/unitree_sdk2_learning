/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: user_data.idl
  Source: user_data.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_USER_DATA_HPP
#define DDSCXX_USER_DATA_HPP

#include <string>

namespace UserDataModule
{
class UserData
{
private:
 std::string string_data_;
 double float_data_ = 0.0;

public:
  UserData() = default;

  explicit UserData(
    const std::string& string_data,
    double float_data) :
    string_data_(string_data),
    float_data_(float_data) { }

  const std::string& string_data() const { return this->string_data_; }
  std::string& string_data() { return this->string_data_; }
  void string_data(const std::string& _val_) { this->string_data_ = _val_; }
  void string_data(std::string&& _val_) { this->string_data_ = _val_; }
  double float_data() const { return this->float_data_; }
  double& float_data() { return this->float_data_; }
  void float_data(double _val_) { this->float_data_ = _val_; }

  bool operator==(const UserData& _other) const
  {
    (void) _other;
    return string_data_ == _other.string_data_ &&
      float_data_ == _other.float_data_;
  }

  bool operator!=(const UserData& _other) const
  {
    return !(*this == _other);
  }

};

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::UserDataModule::UserData>::getTypeName()
{
  return "UserDataModule::UserData";
}

template <> constexpr bool TopicTraits<::UserDataModule::UserData>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::UserDataModule::UserData>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::UserDataModule::UserData>::type_map_blob_sz() { return 262; }
template<> constexpr unsigned int TopicTraits<::UserDataModule::UserData>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::UserDataModule::UserData>::type_map_blob() {
  static const uint8_t blob[] = {
 0x4b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x05,  0x0f,  0xc3,  0x0e,  0xd7,  0xdf,  0x03, 
 0xa1,  0x1e,  0xe9,  0xd5,  0xbd,  0x27,  0x04,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x69,  0x7a,  0x0c,  0x17, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x7e,  0x2d,  0x15,  0x39,  0x00, 
 0x89,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x4b,  0xb5,  0xbb,  0xa4,  0x1c,  0x21,  0x7b, 
 0x92,  0xad,  0xf6,  0xa6,  0x5c,  0x01,  0x1f,  0x00,  0x71,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x55,  0x73,  0x65,  0x72, 
 0x44,  0x61,  0x74,  0x61,  0x4d,  0x6f,  0x64,  0x75,  0x6c,  0x65,  0x3a,  0x3a,  0x55,  0x73,  0x65,  0x72, 
 0x44,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x41,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x1a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x73,  0x74,  0x72,  0x69,  0x6e,  0x67,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x66,  0x6c,  0x6f,  0x61,  0x74,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x4b,  0xb5,  0xbb,  0xa4,  0x1c,  0x21,  0x7b, 
 0x92,  0xad,  0xf6,  0xa6,  0x5c,  0x01,  0x1f,  0xf1,  0x05,  0x0f,  0xc3,  0x0e,  0xd7,  0xdf,  0x03,  0xa1, 
 0x1e,  0xe9,  0xd5,  0xbd,  0x27,  0x04, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::UserDataModule::UserData>::type_info_blob() {
  static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x05,  0x0f,  0xc3,  0x0e,  0xd7,  0xdf,  0x03,  0xa1,  0x1e,  0xe9,  0xd5, 
 0xbd,  0x27,  0x04,  0x00,  0x37,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x4b,  0xb5,  0xbb,  0xa4,  0x1c,  0x21,  0x7b,  0x92,  0xad,  0xf6,  0xa6, 
 0x5c,  0x01,  0x1f,  0x00,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::UserDataModule::UserData>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::UserDataModule::UserData>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::UserDataModule::UserData)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::UserDataModule::UserData>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::UserDataModule::UserData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.string_data(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.float_data()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::UserDataModule::UserData& instance, bool as_key) {
  auto &props = get_type_props<::UserDataModule::UserData>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::UserDataModule::UserData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.string_data(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.float_data()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::UserDataModule::UserData& instance, bool as_key) {
  auto &props = get_type_props<::UserDataModule::UserData>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::UserDataModule::UserData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.string_data(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.float_data()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::UserDataModule::UserData& instance, bool as_key) {
  auto &props = get_type_props<::UserDataModule::UserData>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::UserDataModule::UserData& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.string_data(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.float_data()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::UserDataModule::UserData& instance, bool as_key) {
  auto &props = get_type_props<::UserDataModule::UserData>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_USER_DATA_HPP
